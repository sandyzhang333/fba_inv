config {
  type: "table",  
  schema: "fba_restock_dataset",  
  name: "fba_sales_trend",
  tags: ["FBA销量预测","销量预测"]
}

WITH MaxPurchaseDate AS (
    SELECT 
        MAX(DATE(purchaseDate)) AS max_purchase_date 
    FROM 
        `articulate-sol-302205.hwc_data_ritfit.jijia_erp_order_list_detail`
    -- WHERE date(purchaseDate) <= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) # 日期筛选
),
date_dimension AS
(SELECT 
    DATE_ADD(max_purchase_date, INTERVAL n DAY) AS sale_date
FROM 
    MaxPurchaseDate,
    UNNEST(GENERATE_ARRAY(-30, 0)) AS n  -- 生成 -45 到 0 的数组 
WHERE
    DATE_ADD(max_purchase_date, INTERVAL n DAY) 
    BETWEEN DATE_SUB(max_purchase_date, INTERVAL 30 DAY) AND max_purchase_date),

#组合日期与销售数据，确保每个 SKU 对应每个日期
sales_date as 
    (SELECT 
        d.sale_date,
        s.SPU,
        s.sourceChannel,
        s.product_name,
        AVG(up_level_45d) as up_level_45d,
        AVG(down_level_45d) as down_level_45d,
        COALESCE(SUM(sd.steady_quantity), 0) AS steady_quantity,      
        COALESCE(SUM(sd.sales_quantity), 0) AS sales_quantity,  
    FROM 
        date_dimension d
    CROSS JOIN 
        (SELECT DISTINCT SPU, sourcechannel,product_name
        FROM ${ref("recently_Nday_sales")}) s
    LEFT JOIN 
        ${ref("recently_Nday_sales")} sd 
        ON d.sale_date = sd.sale_date AND s.SPU = sd.SPU and s.sourcechannel = sd.sourcechannel 
    -- WHERE d.sale_date <= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) # 日期筛选
    GROUP BY 
        d.sale_date, s.SPU, s.product_name, s.sourceChannel
    )

select 
CASE
  WHEN rn <= 14 THEN 7
  WHEN rn > 14 AND rn <= 22 THEN 15
  WHEN rn > 22 AND rn <= 37 THEN 30
  ELSE 0 
END AS days,
sale_date,
if_estimated,
spu,
sourcechannel,
product_name,
sales_quantity,
steady_quantity,
predi_day_sales,
avg(up_level_45d)over(partition by spu,sourceChannel) as up_level_45d,
avg(down_level_45d)over(partition by spu,sourceChannel) as down_level_45d,
avg(predi_peak_sales)over(partition by spu,sourceChannel) as predi_peak_sales,
avg(predi_valley_sales)over(partition by spu,sourceChannel) as predi_valley_sales,
from
(select 
row_number()over(partition by ifnull(a.SPU,b.spu),ifnull(a.sourcechannel,b.sourcechannel) order by ifnull(a.sale_date,b.sale_date) desc) as rn,
ifnull(a.sale_date,b.sale_date) as sale_date,
if(predi_day_sales is not null,'estimated','actual') as if_estimated,
ifnull(a.SPU,b.spu) as spu,
ifnull(a.sourcechannel,b.sourcechannel) as sourcechannel,
ifnull(a.product_name,b.product_name) as product_name,
sales_quantity,
steady_quantity,
predi_day_sales,
up_level_45d,
down_level_45d,
round(avg_sales+stddev_sales*up_level_45d,0) predi_peak_sales,
round(avg_sales-stddev_sales*down_level_45d,0) predi_valley_sales
from
(select 
sale_date,
SPU,
sourceChannel,
product_name,
sales_quantity,
steady_quantity,
AVG(up_level_45d)over(partition by spu,sourceChannel) as up_level_45d,
ifnull(AVG(down_level_45d)over(partition by spu,sourceChannel),0) as down_level_45d,
round(AVG(steady_quantity)over(partition by spu,sourceChannel),2) as avg_sales,
round(STDDEV(sales_quantity) OVER (PARTITION BY spu,sourceChannel),2) AS stddev_sales 
from 
sales_date )a
full join
${ref("fba_predi_result")} b
on a.spu = b.spu  and a.sale_date = b.sale_date  and a.sourceChannel = b.sourceChannel)
-- where spu= 'RF-RPLATE-5LB'